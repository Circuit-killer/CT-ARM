
# Nuvoton MCU compile variables
# --------------------- 

name=Cytron ARM
compiler.path={runtime.tools.arm-none-eabi-gcc.path}/bin/
compiler.c.cmd=arm-none-eabi-gcc
compiler.c.flags=-mthumb -c -g -Os -w -std=gnu11 -ffunction-sections -fdata-sections -nostdlib --param max-inline-insns-single=500 -MMD
compiler.c.elf.cmd=arm-none-eabi-g++
compiler.c.elf.flags=-Os -Wl,--gc-sections
compiler.S.flags=-c -g -x assembler-with-cppz
compiler.cpp.cmd=arm-none-eabi-g++
compiler.cpp.flags=-mthumb -c -g -Os -w -std=gnu++11 -ffunction-sections -fdata-sections -fno-threadsafe-statics -nostdlib --param max-inline-insns-single=500 -fno-rtti -fno-exceptions -MMD
compiler.ar.cmd=arm-none-eabi-ar
compiler.ar.flags=rcs
compiler.objcopy.cmd=arm-none-eabi-objcopy
compiler.objcopy.eep.flags=-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0
compiler.elf2hex.flags=-O binary
compiler.elf2hex.cmd=arm-none-eabi-objcopy
compiler.ldflags=
compiler.size.cmd=arm-none-eabi-size
compiler.define=
# this can be overriden in boards.txt
build.extra_flags=

#compiler.lib.c.flags= -D__NUVOTON__ "-I{runtime.platform.path}/system/{build.def}/CMSIS/Include/" "-I{runtime.platform.path}/system/{build.def}/Device/Nuvoton/{build.def}/Include/" "-I{runtime.platform.path}/system/{build.def}/StdDriver/inc/"
compiler.lib.c.flags= -D__NUVOTON__ "-I{runtime.platform.path}/variants/{build.def}"

# Nuvoton MCU compile patterns
# ---------------------

## Compile c files
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} -mcpu={build.mcu} -DF_CPU={build.f_cpu} -D{software}={runtime.ide.version} {build.extra_flags} {compiler.lib.c.flags} {includes} "{source_file}" -o "{object_file}"

## Compile c++ files
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} -mcpu={build.mcu} -DF_CPU={build.f_cpu} -D{software}={runtime.ide.version} {build.extra_flags} {compiler.lib.c.flags} {includes} "{source_file}" -o "{object_file}"

## Create archives
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} "{archive_file_path}" "{object_file}"

## Combine gc-sections, archives, and objects
recipe.c.combine.pattern="{compiler.path}{compiler.c.elf.cmd}" -mcpu={build.mcu} -mthumb {compiler.c.elf.flags} "-T{build.variant.path}/{build.ldscript}" "-Wl,-Map,{build.path}/{build.project_name}.map" --specs=nano.specs --specs=nosys.specs -o "{build.path}/{build.project_name}.elf" "-L{build.path}" -Wl,--cref -Wl,--check-sections -Wl,--gc-sections -Wl,--entry=Reset_Handler -Wl,--unresolved-symbols=report-all -Wl,--warn-common -Wl,--warn-section-align -Wl,--warn-unresolved-symbols -Wl,--start-group "{build.path}/core/syscalls.c.o" {object_files} "{build.variant_system_lib}" "{build.path}/{archive_file}" -Wl,--end-group -lm -gcc

## Create eeprom
recipe.objcopy.eep.pattern=

## Create hex
recipe.objcopy.hex.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.bin"

## Compute size
recipe.size.pattern="{compiler.path}{compiler.size.cmd}" -A "{build.path}/{build.project_name}.elf"
recipe.size.regex=^(?:\.text|\.data|\.ARM.exidx)\s+([0-9]+).*
recipe.size.regex.data=^(?:\.relocate|\.bss)\s+([0-9]+).*




# Nuvoton MCU Uploader tools
# -------------------

tools.nulinkburn.path={runtime.tools.nulinkburn.path}
tools.nulinkburn.cmd.path={path}/nuvodude
#tools.nulinkburn.cmd=nulinkb
#tools.nulinkburn.cmd.windows=nulinkb.bat

tools.nulinkburn.upload.params.verbose=-vv
tools.nulinkburn.upload.params.quiet=
tools.nulinkburn.upload.pattern="{cmd.path}" {upload.verbose} -np "{serial.port}" -nf "{build.path}/{build.project_name}.bin"
#tools.nulinkburn.upload.pattern="{path}/{cmd}" "{path}" "{build.path}/{build.project_name}.bin"
